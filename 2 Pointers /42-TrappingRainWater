def trap(height):
    """
    :type height: List[int]
    :rtype: int
    """
    if not height:
        return 0

    l, r = 0, len(height) - 1
    leftMax, rightMax = height[l], height[r]
    res = 0
    while l < r:
        if leftMax < rightMax:
            l += 1
            leftMax = max(leftMax, height[l])
            res += leftMax - height[l]
        else:
            r -= 1
            rightMax = max(rightMax, height[r])
            res += rightMax - height[r]
    return res


def main():
    height = [0,1,0,2,1,0,1,3,2,1,2,1]
    print(trap(height))


# Execute the main function
if __name__ == "__main__":
    main()

"""
Solution Summary:
This problem is hard difficulty but once we actually think about a solution it is not as bad as we think. 
There are 2 different ways we can solve this problem both of which can be solved in O(n) time complextiy. 
We can iterate ove the array and find the max of the left side and the max of the right side for each of the elements in our input array
then we can compare those two values and save the minimum of both our max's then we simply take that value and subtract the height of each element in our array. 
This solution will work and can be done in O(n) time but will require O(n) space comlexoty as well. 

Another solution we can do and is the way we are solving it above is to simply iterate over our array using 2 pointers 
and we move either pointer if they dont meet the criteria so if left > right we move our left and update our leftMax based on the new element we are pointing at 
then we add the result of our leftMax - height[left] to out result and we do this for our right pointer as well otherwise. 
This solution will run in O(n) time and have O(1) space. The reason this works is because we are only adding to our output 
by moving the minimum of our 2 pointers similarily to our first algoorithm in which we calcluate the max of both sides of out current element and we take the minimum of those values.

 """