def maxArea(height):
    """
    :type height: List[int]
    :rtype: int
    """
    left = 0
    right = len(height) -1
    maxArea = 0

    while left < right:
        y = min(height[left], height[right])
        x = right - left
        area = x * y

        maxArea = max(area, maxArea)

        if height[left] > height[right]:
            right -=1
        elif height[right] > height[left]:
            left +=1
        else:
            left +=1
            right -=1

    return maxArea

def main():
    input_list = [1, 8, 6, 2, 5, 4, 8, 3, 7]
    print(maxArea(input_list))


# Execute the main function
if __name__ == "__main__":
    main()

"""
Solution Summary:

We can solve this problem by using the 2 pointer approach and simply calculating 
the area of each current iteration by getting the width and height of each one or 
simply the x distance betweent the 2 points and the minimum height between the 2 points 
we continue doing this until the left pointer is greater than or equal to the right pointer. 

"""