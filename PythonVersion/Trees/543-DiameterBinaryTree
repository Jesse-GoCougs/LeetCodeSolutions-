# #543 Diameter of Binary Tree
# Difficulty: EASY 


# Prompt:

# Given the root of a binary tree, return the length of the diameter of the tree.
# The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
# The length of a path between two nodes is represented by the number of edges between them.
 

# Example 2:
# Input: root = [1,2]
# Output: 1


# Constraints:
# 	• The number of nodes in the tree is in the range [1, 104].
# 	• -100 <= Node.val <= 100


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

def diameterOfBinaryTree(root):
    res = 0
    def dfs(root):
        nonlocal res
        if not root:
            return 0
        left = dfs(root.left)
        right = dfs(root.right)
        res = max(res, left + right)
        return 1 + max(left, right)
    dfs(root)
    return res


def main():
    print(diameterOfBinaryTree([2,3,4]))

# Execute the main function
if __name__ == "__main__":
    main()

"""
Solution Summary: 
For this solution we want to keep track of the current maximum depth which we will update 
as we traverse the tree further down.  As we can see if we are at a leaf node we simply return 0. 
Otherwise we check the left height and the right height and then we calculate the diameter of our tree by simply 
comparing the current max diameter with the newly calculated diameter finally we return the current height of the 
tree and we recursively continue this process until we reach the bottom of our tree.  Finally, we simply call this 
function from the outer layer  and return the result. 
"""