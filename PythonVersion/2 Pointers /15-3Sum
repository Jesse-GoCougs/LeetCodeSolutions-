# Difficulty: Medium 

# Prompt:  

# Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

# Notice that the solution set must not contain duplicate triplets.

# Example 1: 

# Input: nums = [-1,0,1,2,-1,-4]
# Output: [[-1,-1,2],[-1,0,1]]
# Explanation: 
# nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
# nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
# nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
# The distinct triplets are [-1,0,1] and [-1,-1,2].
# Notice that the order of the output and the order of the triplets does not matter.



# Example 2: 

# Input: nums = [0,1,1]
# Output: []
# Explanation: The only possible triplet does not sum up to 0.



# Example 3: 

# Input: nums = [0,0,0]
# Output: [[0,0,0]]
# Explanation: The only possible triplet sums up to 0.




# Constraints:

# • 3 <= nums.length <= 3000

# • -105 <= nums[i] <= 105



def threeSum(nums):
    res = []
    nums.sort()
    for i, a in enumerate(nums):
        if i > 0 and a == nums[i - 1]:
            continue
        l, r = i + 1, len(nums) - 1
        while l < r:
            threeSum = a + nums[l] + nums[r]
            if threeSum > 0:
                r -= 1
            elif threeSum < 0:
                l += 1
            else:
                res.append([a, nums[l], nums[r]])
                l += 1
                r -= 1
                while nums[l] == nums[l - 1] and l < r:
                    l += 1
                    
    return res

def main():
# Call the function you want to run
    nums = [-1,0,1,2,-1,-4]
    print(threeSum(nums))

# Execute the main function
if __name__ == "__main__":
    main()


# Solution Summary: 

# This question is a bit tricky but we can simplify it by solving smaller problems first. 
# Our goal is to get all triplets that sum to 0. Since we sorted 
# the array we can first avoid having duplicate values in the "a" or 
# first triplet position by checking if our previous value is the same as
# the current value if so we skip that iteration of the loop. Then we simply treat the 
# problem as a "2 sum" problem hence the inner while loop that will find the two other values to 
# form the triplet if they exist. The only other thing we have to worry abut is if we push any 
# values into our output array we need to update the pointers to their accurate position hence why we 
# update the left pointer when we push a triplet solution.  