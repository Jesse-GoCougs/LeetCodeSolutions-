"""
Medium

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.
"""

def twoSum(numbers, target):
    """
    :type numbers: List[int]
    :type target: int
    :rtype: List[int]
    """
    left = 0
    right = len(numbers)-1

    while left < right:
        sum = numbers[left] + numbers[right]

        if sum > target:
            right -=1
        elif sum < target:
            left +=1
        else:
            # the left and right pointers are equal to target
            return [left+1, right+1]
    return []        


def main():
    numbers = [2,7,11,15]
    target = 9
    print(twoSum(numbers, target))
   


# Execute the main function
if __name__ == "__main__":
    main()

"""
Solution Summary:
 We can solve this problem by using the two pointer approach since our input array is already sorted we can simply use a left and right 
 pointer and decrease/increase our pointer depending on the current sum of each element that the pointer is pointing too.
 By doing this we can find the 2 numbers that sum up to our target value if they exist. For example if our input array is numbers = [2,7,11,15], and our target is
   = 9 we start with the left pointer pointing at index 0 and right at index n-1. We move our left pointer if the sum is too small and we move our right pointer
   if our sum is too small. We keep doing this while left < right. Otherwise we return the empty arrray. 
"""