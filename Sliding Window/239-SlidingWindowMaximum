from collections import deque
def maxSlidingWindow(nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        output = []
        q = deque() #index5
        left = 0
        right =0
        while right < len(nums):
            #pop smaller values from q
            while q and nums[q[-1]] < nums[right]:
              q.pop()
            q.append(right) #add to our queue after smaller vals have been poped off 

            #remmove left val from the window 
            if left > q[0]:
                q.popleft()
            #check if window size is valid then we append max val from our q to output 
            if (right +1) >=k:
                output.append(nums[q[0]])
                left += 1 # we increment left index if we have valid window size 
            right +=1
        return output
         
     
def main():
# Call the function you want to run
    # Input: 
    nums = [1,3,-1,-3,5,3,6,7]
    k = 3
    # Output: [3,3,5,5,6,7]
    # Explanation: 
    # Window position                Max
    # ---------------               -----
    # [1  3  -1] -3  5  3  6  7      3
    # 1 [3  -1  -3] 5  3  6  7       3
    # 1  3 [-1  -3  5] 3  6  7       5
    # 1  3  -1 [-3  5  3] 6  7       5
    # 1  3  -1  -3 [5  3  6] 7       6
    # 1  3  -1  -3  5 [3  6  7]      7
    print(maxSlidingWindow(nums, k))


# Execute the main function
if __name__ == "__main__":
    main()



"""
Solution Summary:
    This problem is a leetcode hard and is solved using a monotomic queue. My first thought with this question is to solve it the brute force approach 
    since we have a window of size k we can iterate over our window each time and find the max within our window this approach would take 
    O(k*(n-k)) time complexity since for each new window we would have to find the new maximum within our window. Although this approach would work 
    it is slow and requires repetitive work since we would only be adding one new element for each new window so we would be doing unneccesary work. 

    Note: Since we are trying to find the max within our window each time we could use a monotomic stack. But since for each new window 
    we would need to remove an element and add a new one a queue seems for appropiate since we would need to remove from the left and add to the right.

    The other approach and is the way we solved it above is to use a queue a monotomic increasaing queue to be specific. This way we could keep our values in 
    accending order and easily be able to find the new maximum each time O(1) to find the new max since we would always have the max on 
    the right of our queue. We start by adding our valeus to our queue in accending order so we would "pop" any valeus in between that are less than the current element. 
    Now we have the max value at the right of our queue each time. The trick here is to only increment our left pointer if we have a valid window size 
    if so we increment our left pointer and add our max (rightmost val) to our output. and we would of course always incremnt our right 
    pointer since we want to be able to iterate over our entire array with each new window. 

    This solution would take 
        O(n) time complexity
        O(n) space complexity 
"""