def twoSum( nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: List[int]
    """
    
    
    hashMap = {}

    for index, item in enumerate(nums):
        val = target - item
        if val in hashMap:
            return [hashMap[val], index]
        else:
            hashMap.update({item: index})
    return []


def main():
    nums = [2,7,11,15]
    target = 9
    # Output: [0,1]
    # Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
    # Call the function you want to run
    print(twoSum(nums, target))


# Execute the main function
if __name__ == "__main__":
    main()



"""
Solution Summary:
    This is the very first problem we encounter when we load up leetcode so it will always have a special place in my mind.
    For this problem my first thought process was to sort the array and use the 2 pointer approach to find a valid solution but since 
    the question is asking us to return the index of the 2 numbers that form the correct solution we need to take a different approach. 

    We can solve this problem by using a hashmap that will store the elements in our input array as keys and the index of these elements as values to our correspoding keys. 
    By doing this we can simply iterate over our array and for each value check if the corresponing value that sums the current value to our target value is already 
    in the dictionary. If so we return both inexies as a pair otherwise if we reach the end of our input array and find no matches we can return the empty array meaning we didnt find any sum that 
    will sum to taget. 

    Time Complexity: O(n) linear appraoch 
    Space Complexity: O(n) since we store at worst n elements in our dict 
"""