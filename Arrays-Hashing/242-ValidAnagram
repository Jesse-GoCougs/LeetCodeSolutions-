def isAnagram(s, t):
    """
    :type s: str
    :type t: str
    :rtype: bool
    """
    count1 = {}
    count2 = {}
    matches = 0

    for current in s:
        count1[current] = 1 + count1.get(current, 0)

    for current in t:
        count2[current] = 1 + count2.get(current, 0)
        if current not in count1:
            return False
        if count2[current] == count1[current]:
            matches += 1

    return True if matches == len(count1) else False

def main():
# Call the function you want to run
    s = "anagram"
    t = "nagaram"
    print(isAnagram(s,t))


# Execute the main function
if __name__ == "__main__":
    main()



"""
Solution Summary:
We can solve this problem using our knowledge of data structures, as defined above for a string to be an anagram of another 
string we need to have the exact frequency of all characters from string1 in string2 to be the same, and both strings must be the same length. 

We can achive this in multiple ways one way would simply be to sort both of the strings and iterate over both of them if any of them 
are not equal we return false. This solution would run in O(nlogn) since we need to sort the strings first. 

The way i solved it above is to use 2 different dictionaries one for each string. First we populat the first dictionary 
"count1" with the frequencies of the characters in string1 then we iterate over string2 and for each charater we first check if 
the character is in count1 if it is not we return "False". Otherwise we check if the frequency count is the same for each dictionary 
if so we increment our matches count. 
At the end of the loop we simply return True if matches count is equal to the length of Count1 meaning they are anagrams of each other. 

Time complexity: O(n) 
Space Complexity: O(n) since we store at most O(n) items in our dict 

"""